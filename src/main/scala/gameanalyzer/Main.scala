package gameanalyzer

import gameanalyzer.consoleui.Table
import gameanalyzer.model.Building.remoteConstructionFacility
import gameanalyzer.model.{
  Building,
  GameState,
  GameStateRoot,
  ParcelInstance,
  SkillTree
}
import cats.implicits.*
import gameanalyzer.Simulation.SimulationState
import gameanalyzer.model.Resource
import gameanalyzer.model.Resource.steel
import gameanalyzer.wiki.{
  MediaWikiApi,
  PageContentMaker,
  WikiCredentials,
  WikiPage,
  WikiTables
}
import cats.implicits.*

import java.time.LocalDateTime
import scala.util.{Failure, Success}

object Main {
  def main(rawArgs: Array[String]): Unit =
    CommandLineParser.process(rawArgs)(parsedArgs =>
      SaveGameLoader.load(parsedArgs.saveFile) match {
        case Success(gsr)       => run(parsedArgs, gsr)
        case Failure(exception) => throw exception
      }
    )

  def run(args: CommandLineParser.Args, gsr: GameStateRoot): Unit = {

    val wikiOps = for {
      creds <- WikiCredentials.load(args.credentialsPath)
      api <- MediaWikiApi.login(creds)
      _ <- api.getPage("stone")
      _ <- api.upsertPage(
        title = "bot_test_page",
        newContent = s"Updated on ${LocalDateTime.now()}"
      )
      _ <- api.upsertPage(
        title = "bot_test_page_2",
        newContent = s"Updated on ${LocalDateTime.now()}"
      )
      _ <- api.upsertPage(
        title = "autogen_main_page",
        newContent = mainPageWikiMarkup()
      )
      _ <- Resource.ordered
        .filterNot(_ == Resource.nullResource)
        .traverse(r =>
          println(s"Uploading page for ${r.displayName}")
          api.upsertPage(
            title = r.name(),
            newContent = PageContentMaker.resourcePage(r)
          )
        )
//      _ <- api.upsertPage(
//        title = "steel",
//        newContent = PageContentMaker.resourcePage(steel)
//      )
    } yield ()

    val _ = wikiOps.get

    val gameState = gsr.gameState

    println(PageContentMaker.resourcePage(Resource.steel))

    val summaries = Summaries(gameState)
    if args.summaryFlags.buildings then
      println(summaries.buildingsTable.withBorders().toStringBlock)

    if args.summaryFlags.resources then
      println(summaries.resourcesTable.withBorders().toStringBlock)

    if args.summaryFlags.skills then
      println(summaries.skillsTreeTable.withBorders().toStringBlock)

//    val flowTree = summaries.flowTreeTable
//    println(flowTree.withBorders().toStringBlock)
//    flowTree.bodyRows.foreach(r => println(r))

//    val simState = Simulation(gameState).run()
//    printDeficitParcels(simState)

//    println("")
//    println("=== ITEMS WIKI TABLE ===")
//    println("")
//    println(WikiTables.itemsTable)
//
//    println("")
//    println("=== BUILDINGS WIKI TABLE ===")
//    println("")
//    println(WikiTables.buildingsTable)
//
//    println("")
//    println("=== PARCEL TYPES WIKI TABLE ===")
//    println("")
//    println(WikiTables.parcelTypesTable)
  }

  def mainPageWikiMarkup(): String = {
    s"""
       ~ This page was generated by a bot on ${LocalDateTime.now()}
       ~ 
       ~== Items ==
       ~
       ~${WikiTables.itemsTable}
       ~
       ~== Buildings ==
       ~
       ~${WikiTables.buildingsTable}
       ~
       ~== Parcels ==
       ~
       ~${WikiTables.parcelTypesTable}
       ~
       ~""".stripMargin('~')
  }

  def printDeficitParcels(simState: Simulation.SimulationState): Unit = {
    simState.parcels
      .find(_.deficit.nonEmpty)
      .foreach { p =>
        println(s"parcel: ${p.underlying.displayName} [${p.underlying.id}]")
        p.deficit.foreach { case (r, qty) =>
          println(s"● deficit on ${r.displayName} [${r.name}] = $qty")
          println(s"● producing ${p.production.getOrElse(r, 0.0d)}")
          println(s"● consuming ${p.consumption.getOrElse(r, 0.0d)}")
          simState
            .importsTo(p, r)
            .foreach(c =>
              println(
                s"● importing ${c.actualThroughput} from ${c.source.underlying.displayName} [${c.source.underlying.id}]"
              )
            )
          p.production
        }
      }
  }

}
